git remote add (특정이름) github주소
만약 잘못 입력한 경우
git remote remove (위에 지정된 특정이름)
을 입력하면 설정이 지워짐
git commit 로 바로 들어가버린 경우(-m을 붙이지 않은 경우)[다른 프로그래밍이 실행됨]
:wq를 입력하면 빠져나온다

document.querySelector('').innerHTML
문서(document)에서 선택자를 사용하여(querySelector) id 값이 a인 ("#a") 태그를 선택하고 HTML에 삽입한다(innerHTML)

입력 방법[택1]
1. prompt(); - 이 방법은 경고창에 띄우는 방식이다
2. document.getElementById('id이름').value - 위 설명의 입력 버전. value(값)을 입력받는 형태이다
출력 방법[택1]
1. document.write() - html에 직접 출력하는 방식
2. alert() - prompt의 출력버전
2. document.getElementById('id이름').innerHTML=''; - id이름 이 있는 태그의 문장을 innerHTML의 내용으로 교체

switch-case 문
switch(조건에 해당되는 변수){
    case 조건1:조건1에 해당되면 실행할 코드;
    break; - break;문이 없으면 조건을 만족한 실행을 하고도 밑으로 계속 내려가서 불필요한 작업을 하게 된다
    case 조건2:
    case 조건3:
    조건2 또는 조건3 에 해당되면 실행할 코드;
    break;
    default:조건들에 모두 해당되지 않으면 실행할 코드;
}
동등연산자(==,!=) : 값이 같은지 비교한다. 타입변환을 하므로 0과 false(0)과 ""(빈 문자형)은 모두 같다.
일치연산자(===) : 값뿐만 아니라 자료형까지 비교한다. 타입변환을 하지 않기 때문에 즉, 이 때는 0(숫자) 와 false(bool), ""(문자형)은 모두 다르다.
문자열 출력 때 ``,'',"" 3가지가 존재한다. 이 중 ``은 특이하게 ${} 형태를 안에 쓸 수 있는데, 저 안에서는 변수를 집어넣을 수 있고, 코드를 안에서 따로 계산하기도 한다.
예를 들어 sum2=0 라는 변수를 생성하고 `${num+2}ab`를 하면 2ab가 나온다. 
sum2+`${sum2+2}` 이면 0+2가 아닌 02가 된다[앞의 sum2는 숫자이지만 뒤에 있는 `${sum2+2}`는 문자열이라서 +가 숫자끼리의 덧셈이 아닌 두 값을 붙이는 형태가 되기 때문]

삼항연산자 : <불 표현식>?<참>:<거짓>
코드를 한 줄로 표시 할 수 있을 때, 변수 초기화용[test?test:"초기화값"]
그냥 쓰면 값이 담기지 않기 때문에 변수에 넣거나 console.log에 콘솔에 보이도록 하기
짧은 초기화 조건문 : test=test||'초기화값' <-다음에 확인

배열
let 배열이름=[자료1,자료2,~];
개별접근
배열이름[인덱스번호]; - 인덱스 번호는 0부터 1씩 증가한다. 즉, 자료를 4개 넣었다면 인덱스 번호는 0,1,2,3 이 된다
Array.isArray(변수명) 메소드 - 변수명 이 배열인가?[출력은 bool값]
변수명 instanceof Array - 변수명 이 배열인가?[출력은 bool값]
참고 : typeof를 쓰면 Array가 아닌 object로 나온다

for(초기조건;끝날조건;증감식){조건을 만족할 때 실행할 코드}
초기조건확인→{}안 코드 실행→증감식 실행→끝날조건 확인
1. 끝날 조건을 만족하지 않으면 2번째인 {}안 코드 실행→증감식 실행 반복
2. 끝날 조건을 만족하면 {}를 벗어남[for문 종료]
for in / for of 반복문-배열의 경우
for in : 배열의 요소갯수 만큼 반복
형태 : for (i in 배열이름) - 인덱스의 숫자만큼 출력하게 함. 배열이 3개면 3번 반복
인덱스를 사용하기 때문에 자동으로 0부터 1씩 증가하는 반복이다.
배열의 각 값에 직접 접근
for of : 배열의 값을 가져와서 반복
형태 : for (이름 of 배열이름){(출력부분에 이름);}
배열의 값을 할당받아옴(직접 접근하지 않음)
for-in과 for은 사실상 유사하다고 보면 된다.
for-in은 배열한정이고, 갯수가 정해져 있다면 간단하게 짤 수 있고
for는 배열도 포함된 경우이지만, 조건부를 직접 짜야 한다는 조금 번거로운 점이 있다.
in과 of의 차이
in의 경우 인덱스를 쓰기 때문에 특정 부분을 수정하거나 변환하기 쉽다[n번째, 특정 구간]
of 의 경우 값을 아예 할당받아오기 때문에 그 값을 알아야 수정이 가능한데 만약 같은 값이 존재한다면 그 값도 수정한다는 단점이 있다.

whild(끝날조건){끝날 조건이 만족하기 전까지 반복할 코드} - 먼저 조건을 보고 실행을 함
1.끝날조건 확인
2-1. 조건을 만족하지 않으면 {}안 코드 실행→다시 끝날조건 확인
2-2. 끝날조건을 만족하면 {}를 벗어남[while문 종료]
do{끝날 조건이 만족하기 전까지 반복할 코드} while(끝날조건); - 먼저 실행하고 그다음에 조건을 확인함
1.{}안 코드 먼저 실행→끝날조건 확인
2-1. 조건을 만족하지 않으면 {}안 코드 실행→끝날조건 확인 반복
2-2. 조건을 만족하면 다음줄 실행[do-while문 종료]
break; - 반복문을 완전히 빠져나옴
continue; - 반복문의 맨 앞으로 되돌아감[그 밑의 코드는 작동하지 않음]
for 문에 continue의 경우 continue 다음 과정은 증감식→종료조건부 로 간다
for(1;2;3){
if(4)continue;
}
를 예로 들면 4의 조건을 만족하면 3→2로 간다.

함수나 이벤트 안에 let으로 만든 변수는 지역변수
그 안에서만 존재하는 변수. 함수나 이벤트 밖에서는 없는 변수가 된다[안에서 만든 let=a를 밖에서 a=으로 불러 올 수 없다]
함수나 이벤트 밖에서 let으로 만든 변수는 전역변수
script 안에 만든 변수이므로 함수나 이벤트 안에서도 쓸 수 있다. 하지만 동시지정은 할 수 없다[let=a 반복하면 에러가 뜬다]

중첩배열의 경우
형태는 let 배열이름=[[배열1],[배열2],[배열3]]; 이다.
배열이름[인덱스번호] 를 입력하면 해당 인덱스의 배열이 나온다.
해당 인덱스의 배열 안의 개별값을 불러내고 싶다면 배열이름[인덱스번호][안배열의 인덱스번호]; 와 같이 입력하면 나온다.

함수 형태 : fuction 만들함수명(매개변수,여러개면 쉼표로 구분){구현할 함수 식}
주의할 점은 {}안에 let으로 선언한 변수는 지역변수가 되므로 그 안에서만 유효하므로 밖에서는 쓸 수 없다. 더욱이 또 선언을 할 수도 없다.
이 때 return문을 사용한다. 계산된 혹은 전달하고 싶은 결과값을 전달한다.
인수(매개변수) : 함수를 호출 할 때 넣어주는 값
함수 또한 여러개의 경우 괄호안이 먼저 실행된다. 함수1(함수2()) 면 함수2 먼저 실행하고 그다음 함수1이 실행된다

함수를 만들기 전에 script에서 확인 후 함수에 넣기
매개변수→매개변수의 이름과 임의의 값, 실행내용→그대로 작성, 리턴값→변수에 넣어서 확인
함수명에 Ctrl을 누른 채로 커서를 가져다 대면 손가락 모양이 나오는데 클릭하면 생성한 함수 줄로 바로 이동한다.

함수의 기본원칙
초과된 인수는 무시 / 부족한 인수는 undefined / 이름은 같으나 매개변수가 여러개인 경우 - 매개변수의 수가 많은 함수만 호출

매개변수=n 라고 붙여주면 값이 안 들어 갈 때 n 값이 기본적으로 들어간다.

함수 표현식을 이용하여 작성한 경우는 변수로 값이 할당된 이후 사용 할 수 있다.
함수 선언문은 모든 곳에서 사용가능. 함수 표현식은 let의 특성에 따라 특정 블록에서만 사용가능

hoisting(호이스팅) : 이전에 선언된 함수를 미리 위로 끌어 올리는 것
명시적 함수는 끌어올라가지만 함수 표현식은 변수에 할당되었기 때문에 위로 끌어 올리지 못함

화살표함수(ES6 문법) : =>[익명함수를 더 간단하게 표현]
함수이름=(매개변수)=>{실행할 문장} 형태
매개변수가 1개인 경우 () 생략 가능
문장이 1줄인 경우 {} 생략 가능. 이 때 자동으로 return에 들어간다

재귀(recursion)함수 : 함수 내에서 자기 자신을 다시 호출하는 함수
잘못 사용하면 무한루프가 된다. for문과 유사한 결과를 낼 수 있다.
재귀조건 넣기 전 출력이 먼저 실행되고 재귀를 끝낼 조건을 만족하는 내용을 출력하고
그다음 초기입력값에 도달할 때 까지 계속 출력되는 형태이다.[Recursionfunction.html 참고]

콜백(callback)함수 : 작성한 함수를 다른 함수의 값으로 넣어서 사용
다른 함수의 값으로 들어가기에 ()제외하고 이름만 사용
