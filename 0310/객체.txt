객체(object) : 자바스크립트의 기본 타입
속성(property) : 개체의 값을 가지고 있다
메소드(method) : 객체의 함수를 가지고 있다
객체지향 언어 : 자바스크립트는 숫자,문자열,boolean,undefined 타입을 제외한 모든 것이 객체
위 제외한 것들은 원시 타입이라고 하고 값이 정해진

객체 생성 형태
1. 리터럴(literal)방법
let 객체명={
    속성명:속성값,
    여러개를 넣을려면 ,로 구분,
    함수명:function(매개변수){함수식}
};

접근 형태
객체명.property이름 또는 객체명["property이름"(",',` 셋 다 가능)] - 객체값 접근
객체명.method이름() - 객체함수 접근
함수에서 속성이름에 접근하고 싶다면 this.를 붙이면 된다. 실제로 붙이고 나서 커서를 가져다 대면 객체 생성 세팅으로 가는걸 보여준다
객체 속성에 접근해서 바로 값을 할당 할 수도 있다. 그러면 기존에 있던 속성값은 없어진다.

객체이기 때문에 typeof에 넣으면 object라고 나온다.
객체 자체를 출력해보면 [object Object] 가 나온다.

2. 생성자 함수 방법
형태
function 객체명(매개변수,여러개면,로 구분)
{
    this.매개변수명=매개변수명;
    this.함수명=function(매개변수명){함수식}
}
변수명 작성 시 다른 함수와의 구분을 위해 앞글자를 대문자로 작성
생성자 함수를 쓰는 이유는 리터럴 방식을 쓴 경우 해당 객체명에 일일히 접속해야 하기 때문에 한꺼번에 수정 시 번거로움이 있다.

객체안의 변수를 함수내에나 변수의 값으로 쓰고 싶다면 this.를 붙여서 쓰면 된다.

객체 지향 프로그래밍(OOP)
모든 데이터를 하나의 물체처럼 취급해서 프로그래밍 하는 방법
프로그램을 짤 때 동일한 목적이나 기능을 하는 변수와 함수들을 각각 하나로 묶어서 객체로 만들고 그 객체들끼리 상호 통신하면서 프로그램 전체가 돌아가도록 코드 구성

delete 연산자 : 만든 객체명.(속성 or 함수명) - 해당 속성이나 함수명을 없애준다
스크립트 안에 쓰면 바로 없어지기 때문에 볼 수 없기에 관리자 모드-콘솔에서 따로 입력해주고 객체명을 적어보면 없어진 것을 확인 할 수 있다.